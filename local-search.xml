<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/23/4.matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/23/4.matlab%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Matlab学习笔记"><a href="#Matlab学习笔记" class="headerlink" title="Matlab学习笔记"></a>Matlab学习笔记</h1><h2 id="1-基础运算操作和矩阵操作"><a href="#1-基础运算操作和矩阵操作" class="headerlink" title="1.基础运算操作和矩阵操作"></a>1.基础运算操作和矩阵操作</h2><h3 id="1-1快捷键："><a href="#1-1快捷键：" class="headerlink" title="1.1快捷键："></a>1.1快捷键：</h3><p>clc#清理工作区</p><p>clear + 变量#清理某个变量，如果没有加变量则会清理所有变量</p><p>help  + 需要查找的关键字#查东西</p><p>who#显示你有的变量</p><p>whos#显示所有变量，并且还有变量类型等相关信息</p><p>format#后面加一些关键字来修改显示格式，具体请右转help</p><h3 id="1-2知识点："><a href="#1-2知识点：" class="headerlink" title="1.2知识点："></a>1.2知识点：</h3><h4 id="1-2-1"><a href="#1-2-1" class="headerlink" title="1.2.1"></a>1.2.1</h4><p>不要把关键字啥的给赋值当作变量使用变量。在matlab中，这种行为不会报错，但是你的变量的优先级高于这些关键字，然后就会导致很鬼畜的结果。如果你这么做了，clear它。如果你甚至赋值了clear，那就clear clear    -_-</p><h4 id="1-2-1-1"><a href="#1-2-1-1" class="headerlink" title="1.2.1"></a>1.2.1</h4><p>在计算式子后加分号 ; 可以让回复不显示ans</p><h4 id="1-2-3"><a href="#1-2-3" class="headerlink" title="1.2.3"></a>1.2.3</h4><p>中括号[ ]多用来表示数组，其中元素可用逗号 ，或着空格来间隔开。分号 ; 表示换行。#注意，如果有表达式的项慎用空格。例如1-2是一个元素1 -2可就是两个元素了</p><h4 id="1-2-4"><a href="#1-2-4" class="headerlink" title="1.2.4"></a>1.2.4</h4><p>如果将两个数组变量用中括号括起来则表示拼接。例如[A,B]表示横向拼接。[A;B]表示纵向拼接。#注，这个操作也可以多层套娃，里面的拼完外面的再拼例如[C,[A,B]]</p><h4 id="1-2-5"><a href="#1-2-5" class="headerlink" title="1.2.5"></a>1.2.5</h4><p>变量后面加小括号可以取里面的第几个数值。注意，矩阵中是一列一列开始往下算的。矩阵的某行某列的数值则用  变量（行，列）  表示</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/23/3.python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/23/3.python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Py学习笔记"><a href="#Py学习笔记" class="headerlink" title="Py学习笔记"></a>Py学习笔记</h1><h3 id="1-输出："><a href="#1-输出：" class="headerlink" title="1.输出："></a>1.输出：</h3><p>print(666)</p><h3 id="2-变量：格式：变量名称-变量的值"><a href="#2-变量：格式：变量名称-变量的值" class="headerlink" title="2.变量：格式：变量名称**&#x3D;**变量的值"></a>2.变量：格式：变量名称**&#x3D;**变量的值</h3><p>money &#x3D; 100<br>        money-&#x3D;10<br>        print(money)</p><h3 id="3-py中的数据类型string-float-int"><a href="#3-py中的数据类型string-float-int" class="headerlink" title="3.py中的数据类型string float int"></a>3.py中的数据类型string float int</h3><p>验证数据类型type()</p><p>a&#x3D;10<br>        print(type(a))</p><h3 id="4-数据类型转换int-x-float-x-str-x"><a href="#4-数据类型转换int-x-float-x-str-x" class="headerlink" title="4.数据类型转换int(x)  float(x)  str(x)"></a>4.数据类型转换int(x)  float(x)  str(x)</h3><p>str1&#x3D;str(11)<br>        print(type(str1))</p><h3 id="5-标识符（起名字）标识符中只能出现：英文，中文，数字，下划线；"><a href="#5-标识符（起名字）标识符中只能出现：英文，中文，数字，下划线；" class="headerlink" title="5.标识符（起名字）标识符中只能出现：英文，中文，数字，下划线；"></a>5.标识符（起名字）标识符中只能出现：英文，中文，数字，下划线；</h3><p>（不推荐中文）（数字不能用在开头） （大小写敏感） （不可使用关键字）</p><h3 id="6-常见的运算符"><a href="#6-常见的运算符" class="headerlink" title="6.常见的运算符"></a>6.常见的运算符</h3><p>+-* &#x2F;       &#x2F;&#x2F;（取整）    %（取余）* *（指）</p><h3 id="7-字符串拓展内容"><a href="#7-字符串拓展内容" class="headerlink" title="7.字符串拓展内容"></a>7.字符串拓展内容</h3><h4 id="7-1单-双-三引号定义法"><a href="#7-1单-双-三引号定义法" class="headerlink" title="7-1单&#x2F;双&#x2F;三引号定义法"></a>7-1单&#x2F;双&#x2F;三引号定义法</h4><p>print(“””我是”””)   (三引号能换行)*   </p><h4 id="7-2转义字符"><a href="#7-2转义字符" class="headerlink" title="7-2转义字符   \"></a>7-2<em>转义字符</em>   \</h4><h4 id="7-3字符串的拼接"><a href="#7-3字符串的拼接" class="headerlink" title="7-3字符串的拼接"></a>7-3字符串的拼接</h4><p><em>print(“<strong>我是</strong>“+”<strong>一只小小的羊</strong>“)</em>   只能进行字符串的拼接</p><h4 id="7-4字符串格式化方式1"><a href="#7-4字符串格式化方式1" class="headerlink" title="7-4字符串格式化方式1"></a>7-4<strong>字符串格式化方式</strong>1</h4><p>%  <em>占位符</em>    <em>s</em> <em>将变量变成字符串放入占位的地方（像</em> <em>C</em> <em>语言里面的</em><em>%d*<em>等</em></em>….**）</p><p>Num&#x3D;10</p><p>massage&#x3D;”我是%d只小小的羊” % Num    #<strong>里面</strong>%d<strong>用</strong>%s也行</p><p>print(massage)</p><h4 id="7-5字符串的格式化过程中的精度控制"><a href="#7-5字符串的格式化过程中的精度控制" class="headerlink" title="7-5字符串的格式化过程中的精度控制"></a>7-5字符串的格式化过程中的精度控制</h4><p><strong>使用辅助符号</strong>m&#x2F;.n*  如%5d：宽度为5     %5.2f:<strong>宽度为</strong>5，精度为2</p><h4 id="7-6字符串格式化方式2"><a href="#7-6字符串格式化方式2" class="headerlink" title="7-6字符串格式化方式2"></a>7-6<em><strong>字符串格式化方式</strong>2</em></h4><p><em>快速格式化  语法</em> <em>f”<strong>内容</strong>{<strong>变量</strong>}”    (<strong>不管数据类型，不作精度控制</strong>)</em>  </p><p>print(f”我是{Num}只小小的羊”)</p><h4 id="7-7对表达式进行格式化"><a href="#7-7对表达式进行格式化" class="headerlink" title="7-7对表达式进行格式化"></a>7-7对表达式进行格式化</h4><p><strong>什么是表达式？ 一条具有明确执行结果的代码语句   如：</strong>1+1<strong>，</strong>5*2……<br>        <em>print(“2</em>5的结果为%d”%(2*5))</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/17/2.%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/07/17/2.%E5%82%85%E9%87%8C%E5%8F%B6%E7%BA%A7%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="傅里叶级数（浅学）"><a href="#傅里叶级数（浅学）" class="headerlink" title="傅里叶级数（浅学）"></a>傅里叶级数（浅学）</h1><h2 id="1-学习路径："><a href="#1-学习路径：" class="headerlink" title="1.学习路径："></a>1.学习路径：</h2><p>傅里叶级数的概念：&gt;<a href="https://zhuanlan.zhihu.com/p/19763358">傅里叶分析之掐死教程（完整版）更新于2014.06.06 - 知乎 (zhihu.com)</a>&lt;</p><p>傅里叶级数的数学推导及应用：&gt;B站UP主DR_CAN&lt;</p><h2 id="2-傅里叶级数的公式总结："><a href="#2-傅里叶级数的公式总结：" class="headerlink" title="2.傅里叶级数的公式总结："></a>2.傅里叶级数的公式总结：</h2><p><img src="/image/2.jpg"></p><p><img src="/image/1.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/07/16/1.%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BAblog%E6%97%B6%E9%81%87%E5%88%B0%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2023/07/16/1.%E5%85%B3%E4%BA%8E%E6%90%AD%E5%BB%BAblog%E6%97%B6%E9%81%87%E5%88%B0%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E4%BB%A5%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="第一篇blog，关于搭建blog时遇到各种问题以及解决方案"><a href="#第一篇blog，关于搭建blog时遇到各种问题以及解决方案" class="headerlink" title="第一篇blog，关于搭建blog时遇到各种问题以及解决方案"></a>第一篇blog，关于搭建blog时遇到各种问题以及解决方案</h1><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a><strong>遇到的问题</strong></h2><h3 id="1-win11系统命令提示行无法执行指令解决方案"><a href="#1-win11系统命令提示行无法执行指令解决方案" class="headerlink" title="1.win11系统命令提示行无法执行指令解决方案"></a>1.win11系统命令提示行无法执行指令解决方案</h3><p>1、打开Windows搜索(按键盘上的Win+S组合键)，顶部搜索框，输入PowerShell命令，然后点击以管理员身份运行Windows PowerShell。</p><p>2、输入并按回车执行<strong>set-ExecutionPolicy RemoteSigned</strong>命令，然后输入Y，按回车即可。</p><p>3、一般来说到这一步就可以解决了，但是也有用户执行以上命令后，出现红字报错。</p><p>4、这时候，再依次输入并按回车执行以下3条命令</p><p>1）Set-ExecutionPolicy -Scope CurrentUser</p><p>2）RemoteSigned</p><p>3）Y</p><h3 id="2-Spawn报错"><a href="#2-Spawn报错" class="headerlink" title="2.Spawn报错"></a>2.Spawn报错</h3><ul><li>先是出现错误：<br><code>error：spawn failed...</code></li><li>然后经过一些博客的操作会出现以下问题：<br><code>fatal: cannot lock ref &#39;HEAD&#39;: unable to resolve reference HEAD: Invalid argument error: src refspec</code></li><li>或者：<br><code>error: src refspec HEAD does not match any.</code>等等</li></ul><h4 id="总结一下："><a href="#总结一下：" class="headerlink" title="总结一下："></a>总结一下：</h4><p>问题大多是因为<code>git </code>进行<code>push</code>或者<code>hexo d</code>的时候改变了一些<code>.deploy_git</code>文件下的内容。</p><h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ol><li>删除<code>.deploy_git</code>文件夹;</li><li>输入<code>git config --global core.autocrlf false</code></li><li>然后，依次执行：<br><code>hexo clean</code><br><code>hexo g</code><br><code>hexo d</code></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
